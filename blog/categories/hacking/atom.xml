<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacking | Clockfort's Tech Blog]]></title>
  <link href="http://clockfort.github.io/blog/categories/hacking/atom.xml" rel="self"/>
  <link href="http://clockfort.github.io/"/>
  <updated>2013-08-17T01:08:34-07:00</updated>
  <id>http://clockfort.github.io/</id>
  <author>
    <name><![CDATA[Chris Lockfort]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making a Custom Linux Build]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/16/making-a-custom-linux-build/"/>
    <updated>2013-08-16T15:33:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/16/making-a-custom-linux-build</id>
    <content type="html"><![CDATA[<p>I&rsquo;m borrowing the OpenWRT project&rsquo;s surprisingly easy to use cross-compilation toolchain to make a custom 3.10 Linux kernel, ramdisk, and root image for this device. The end result isn&rsquo;t going to look anything like OpenWRT, though, more like a cross-Linux-from-Scratch install, since my needs are very different than normal OpenWRT uses (I am not limited to a horrid platform with ~16MB of flash, ~8MB of RAM, a single slow ARM CPU; I have GB/TB of disks, 4GB of RAM, 16 CPUs&hellip; and a weird architecture) so it&rsquo;s pretty much me having to cross-compile and build a root filesystem disk image of an entire standard linux distro from source for a fairly rare MIPS platform.</p>

<p>There are a lot of pains about this &ndash; kernel config is a little weird for this platform, and I found a few places that won&rsquo;t work (or even compile) for MIPS/Octeon platform. The kernel itself is easy, though, compared to building out a good-sized userspace for this platform. Some applications have x86/ARM/etc specific code and can&rsquo;t compile for MIPS; some applications have bad building dependency graphs and can&rsquo;t be built in parallel; other applications would work fine on MIPS, and compile reliably in parallel, but their trunk builds are currently broken for one reason or another. Or others use outdated kernel interfaces and can&rsquo;t build against 3.10 kernels.</p>

<p>So, as a result, the build process is:
* Do kernel config, select packages to build, add in a few extras that I&rsquo;ll need that aren&rsquo;t tracked by OpenWRT
* Start building
* Stop on an error
* Fix error if it&rsquo;s a package I need, or toss out the application if it&rsquo;s a feature that is more of a &ldquo;would-be-nice&rdquo; than a &ldquo;must-have&rdquo;
* Start building again with insane verbosity options enabled
* Stop on an error&hellip; (repeat for hours and hours)</p>

<p>Pro-tip: There are an absurd number of wireless kernel modules that don&rsquo;t compile/work on MIPS64. x86 binary firmware blobs are stupid.</p>

<p>After finding a kernel config with the maximum number of features I wanted (read: lots of weird networking / routing stuff, as well as heavy amounts of kernel debugging tool support) that didn&rsquo;t make my $(CC) barf all over the screen, and patching the build systems for a few applications I wanted to use (for some reason the HEAD of ISC&rsquo;s DHCPD has some non-gnu-make specific shit in it, among a few other things that are a little off), I finally managed to get a working bunch of build scripts. That said, the actual compilation process takes well over an hour on my i7, mostly due to restrictive -j1 settings on my part, because I was tired of dealing with a few packages that didn&rsquo;t properly enumerate their dependency graphs. This process also spits out over 50 MEGABYTES of logging to STDOUT/STDERR. No big deal.</p>

<p>I actually loaded an ELF binary of my 3.10 kernel build + an initrd in case things went to shit onto a small FAT boot partition on compact flash this time, rather than TFTPing, since these images are fairly large. I also placed an ext4 partition with a decently populated root environment on the CF card as well. Related to that ext4 partition &ndash; I had a few problems creating that as well. I wanted to have the smallest possible ext4 partition so if didn&rsquo;t have to copy much data over network/IDE to CF card/whatever, and wanted it to be later expandable, so I really pushed up the inode to block ratio in order to have a working filesystem that could support many files when it was later expanded. It didn&rsquo;t appreciate my initial settings (<code>genext2fs: too much overhead, try fewer inodes or more blocks.</code>) but I compromised a little and it gave in to what I wanted.</p>

<p><code>text Kernel Log Snippet
[  356.227919] Data bus error, epc == ffffffff8134a948, ra =
= ffffffff8134a854
[  356.234721] Oops[#1]:
[  356.236986] CPU: 0 PID: 1 Comm: swapper/0 Not tainted 3.10.0 #2
[  356.242891] task: a80000003b840b38 ti: a80000003b844000 task.ti: a80000003b844000
[  356.250358] $ 0   : 0000000000000000 0000000010108ce1 0000000000000000 00011b00f0081000
[  356.258353] $ 4   : ffffffff814a0000 0000000000000000 0000000000000004 0000000000000002
[  356.266347] $ 8   : a80000003b847ca0 0000000000000001 7669636520303030 303a30313a30392e
[  356.274341] $12   : 0000000000000000 ffffffff8be48698 0000000000001000 0000000000000000
[  356.282335] $16   : a80000003b8b6000 90011b00f0081000 000000000000001e 0000000000002edf
[  356.290330] $20   : ffffffff8be40000 ffffffffffffffff 0000000000000040 ffffffff8be40000
[  356.298324] $24   : 0000000000000001 0000000000000000                                  
[  356.306318] $28   : a80000003b844000 a80000003b847d10 ffffffff814ec4e0 ffffffff8134a854
[  356.314313] Hi    : 0000000000000000
[  356.317875] Lo    : 0000000000000000
[  356.321458] epc   : ffffffff8134a948 quirk_usb_early_handoff+0x22c/0x730
[  356.328129]     Not tainted
[  356.330920] ra    : ffffffff8134a854 quirk_usb_early_handoff+0x138/0x730
[  356.337600] Status: 10108ce3\0x09KX SX UX KERNEL EXL IE
[  356.342553] Cause : 4080801c
[  356.345422] PrId  : 000d0003 (Cavium Octeon)
[  356.349678] Modules linked in:
[  356.352725] Process swapper/0 (pid: 1, threadinfo=a80000003b844000, task=a80000003b840b38, tls=0000000000000000)
[  356.362885] Stack : ffffffff81520000 ffffffff8141e2a0 a80000003b8b6090 ffffffff814c8030
\0x09  ffffffff814c8048 a80000003b8b6000 000000000000ffff ffffffff8be40000
\0x09  ffffffffffffffff 0000000000000040 ffffffff8be40000 ffffffff812e3b60
\0x09  0000000000000010 a80000003b8b6000 0000000000000010 ffffffff8be80000
\0x09  ffffffff81520000 ffffffff814a7b68 0000000000000006 ffffffff81543094
\0x09  0000000000000000 ffffffff8137a410 ffffffff8be40000 ffffffff8154302c
\0x09  0000000000000006 0000000000000000 ffffffff8be40000 ffffffff8110bae0
\0x09  ffffffff8be40000 ffffffff81558e90 ffffffff81568888 0000000000000006
\0x09  ffffffff81558e48 ffffffff8152fb0c ffffffff8be40000 0000000000000000
\0x09  0000000000000000 0000000000000000 0000000000000000 0000000000000000
\0x09  ...
[  356.427883] Call Trace:
[  356.430326] [&lt;ffffffff8134a948&gt;] quirk_usb_early_handoff+0x22c/0x730
[  356.436672] [&lt;ffffffff812e3b60&gt;] pci_fixup_device+0x150/0x1ac
[  356.442409] [&lt;ffffffff81543094&gt;] pci_apply_final_quirks+0x68/0x128
[  356.448576] [&lt;ffffffff8110bae0&gt;] do_one_initcall+0x88/0x120
[  356.454141] [&lt;ffffffff8152fb0c&gt;] kernel_init_freeable+0x140/0x1fc
[  356.460221] [&lt;ffffffff811067c4&gt;] kernel_init+0x14/0x110
[  356.465431] [&lt;ffffffff81100948&gt;] ret_from_kernel_thread+0x10/0x18
[  356.471505]
[  356.472980]
Code: 2412001e  ae220008  8e220008 &lt;7c0210a0&gt; 00221402  c8400005  24040001  0c443ee2  2652ffff
[  356.487055] ---[ end trace 2a21ae29f86033b8 ]---
</code></p>

<p>Hahahahaha damn it.
Good news is, though, the PCI bus works perfectly, and it even loaded a network driver for a device! Also the RTC works. So I won&rsquo;t have to live in 1970. I wouldn&rsquo;t like that, they don&rsquo;t have cool MIPS machines yet.</p>

<p>Bad news is, besides the kernel oops from the USB implementation, is that while all 16 CPUs were detected properly (unlike OpenBSD), the heirarchical RCU (currently the default) I configured forced NUM_CPUS back down to 1 from 16. Oh well, easy enough to switch it to classic.</p>

<p>Anyways, we were running Linux on this Cavium Octeon based Lanner MR-950 for an entire 356 milliseconds, so I&rsquo;d call that a win.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Picky Software to go with Picky Hardware]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/15/picky-hardware/"/>
    <updated>2013-08-15T17:46:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/15/picky-hardware</id>
    <content type="html"><![CDATA[<p>Good news! Grabbed a snapshot kernel build from OpenBSD&rsquo;s trunk (currently only the development version, 5.4, has the beginnings of support for any Cavium SoCs at all) and managed to TFTPboot into that kernel and a small ramdisk.
I did have some problems; everyone on the internet seems to say that telling u-boot&rsquo;s TFTP client to download to memory address 0 is a sort of auto-find-an-address-that-won&rsquo;t-stomp-on-uboot&rsquo;s-own-memory, but this was not the case for me. Manually inserting an ELF binary (in this case, kernel + small ramdisk) at 0x21000000 and booting it with the ELF-binary loader (<code>bootoctlinux</code>) did work though. (I got the 0x21000000 address from whoever owned this board last, as there were some macros left in the preboot environment using that address)</p>

<p>&hellip; that&rsquo;s where the fun stops though.</p>

<p><code>text
octcf0 at iobus0 base 0x1d000800 irq 0: Doesn't support 8bit card
: card not present
</code></p>

<p>(from OpenBSD/src/sys/arch/octeon/dev/octcf.c:)
``` c OpenBSD/src/sys/arch/octeon/dev/octcf.c</p>

<p>for (i = 0; i &lt; 8; i++) {</p>

<pre><code>uint64_t cfg = 
*(uint64_t *)PHYS_TO_XKPHYS(
    OCTEON_MIO_BOOT_BASE + MIO_BOOT_REG_CFG(i), CCA_NC);

if ((cfg &amp; BOOT_CFG_BASE_MASK) ==
    (OCTEON_CF_BASE &gt;&gt; BOOT_CFG_BASE_SHIFT)) {
    if ((cfg &amp; BOOT_CFG_WIDTH_MASK) == 0)
        printf(": Doesn't support 8bit card\n",
            wd-&gt;sc_dev.dv_xname);
    break;
}
</code></pre>

<p>}
```</p>

<p>ARGH. The hardware can do it, but OpenBSD is so damn picky about what it will take. USB didn&rsquo;t come up on boot either, and neither did the SATA controller, and neither did the network, so my options of what to boot from are basically using u-boot to manually load ramdisks into ram and booting them&hellip; or nothing.</p>

<p>Also bad:
<code>text
cpu0 at mainbus0: Unknown CPU type (0x0) rev 0.3 499 MHz, Software FP emulation
vendor "Cavium", unknown product 0x0005 (class processor subclass MIPS, rev 0x03) at pci0 dev 0 function 0 not configured
unsupported octeon model: 0xd0003
</code></p>

<p>The OpenBSD kernel doesn&rsquo;t know what this processor is :&ndash;(  Also as a result it&rsquo;s using only two cores, and is software-emulating floating point instructions, since it doesn&rsquo;t know how to interact with the hardware.</p>

<p>Not the worst, mostly just annoying:
``` text</p>

<p>0:0:0: mem address conflict 0x11000000/0x1000</p>

<p>0:0:0: mem address conflict 0x18000000/0x8000000</p>

<p>0:5:0: bridge mem address conflict 0x21000000/0x300000</p>

<p>0:5:0: bridge mem address conflict 0x10000000/0x100000</p>

<p>WARNING: No TOD clock, believing file system.
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ram Success!]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/13/ram-success/"/>
    <updated>2013-08-13T20:23:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/13/ram-success</id>
    <content type="html"><![CDATA[<p>Whoo! Got one of the two hard-to-find rare RAM sticks today (they shipped from different warehouses that each only had one stick left!). Stuck it in DIMM slot 0 (marked by &ldquo;J1&rdquo; on the PCB silkscreen) (the SoC apparently will not boot with memory only in DIMM1 slot) and everything worked great! The other 2GB (matched!) stick comes tomorrow.</p>

<p>Sure enough all that I needed was a slightly different chip configuration of RAM; this RAM is 8-bit wide rather than the previous easier to find ram with 4-bit width (higher density chip rank configuration).</p>

<p>``` text
\0x00
\0x00</p>

<p>U-Boot 1.1.1 (Development build) (Build time: Mar 15 2007 &ndash; 03:44:07)</p>

<p>WARNING:
WARNING: Measured DDR clock mismatch! expected: 266 MHz, measured: 196 MHz, cpu clock: 499 MHz
WARNING: Using measured clock for configuration.
WARNING:</p>

<p>Warning: Clock descriptor tuple not found in eeprom, using defaults</p>

<p>WARNING: memory configured for 196 mhz clock.<br/>
If this is not the actual memory clock
poor performance and memory instability may result.<br/>
The memory speed must be specified in the board eeprom</p>

<p>Warning: Board descriptor tuple not found in eeprom, using defaults
EBT3000 board revision major:1, minor:0, serial #: unknown
OCTEON CN38XX-NSP revision: 3(pass 4), Core clock: 499 MHz, DDR clock: 196 MHz (392 Mhz data rate)</p>

<p>DRAM:  2048 MB</p>

<p>Flash: 16 MB
Clearing DRAM&hellip;..
.
.
.
done
BIST check passed.
Starting PCI
PCI Status: PCI-X 64-bit
PCI BAR 1: Memory 0x80080000  PCI 0x18000000
Net:   octeth0, octeth1, octeth2, octeth3, octeth4, octeth5, octeth6, octeth7
Bus 0:
OK</p>

<p>  Device 0: Model: STEC M4 CF Firm: E6236-2 Ser#: STM000105607</p>

<pre><code>        Type: Hard Disk
        Capacity: 14840.9 MB = 14.4 GB (30394224 x 512)
</code></pre>

<p>Octeon ebt3000#
help</p>

<p>?       &ndash; alias for &lsquo;help&rsquo;
askenv  &ndash; get environment variables from stdin
autoscr &ndash; run script from memory
base    &ndash; print or set address offset
bootelf &ndash; Boot from an ELF image in memory
bootoct &ndash; Boot from an Octeon Executive ELF image in memory
bootoctelf &ndash; Boot a generic ELF image in memory. NOTE: This command does not support</p>

<pre><code>         simple executive applications, use bootoct for those.
</code></pre>

<p>bootoctlinux &ndash; Boot from a linux ELF image in memory
bootp   &ndash; boot image via network using BootP/TFTP protocol
cmp     &ndash; memory compare
coninfo &ndash; print console devices and informations
cp      &ndash; memory copy
crc32   &ndash; checksum calculation
dhcp    &ndash; invoke DHCP client to obtain IP/boot params
echo    &ndash; echo args to console
eeprom  &ndash; EEPROM sub-system
erase   &ndash; erase FLASH memory
fatinfo &ndash; print information about filesystem
fatload &ndash; load binary file from a dos filesystem
fatloadalloc &ndash; load binary file from a dos filesystem, and allocate</p>

<pre><code>      a named bootmem block for file data
</code></pre>

<p>fatls   &ndash; list files in a directory (default /)
flinfo  &ndash; print FLASH memory information
go      &ndash; start application at address &lsquo;addr&rsquo;
gunzip  &ndash; Uncompress an in memory gzipped file
help    &ndash; print online help
ide     &ndash; IDE sub-system
initflash &ndash; init flash when boot from Netrom
itest\0x09 &ndash; return true/false on integer compare
loadb   &ndash; load binary file over serial line (kermit mode)
loop    &ndash; infinite loop on address range
md      &ndash; memory display
mii     &ndash; MII utility commands
mm      &ndash; memory modify (auto-incrementing)
mtest   &ndash; simple RAM test
mw      &ndash; memory write (fill)
namedalloc    &ndash; Allocate a named bootmem block
namedfree    &ndash; Free a named bootmem block
namedprint    &ndash; Print list of named bootmem blocks
nm      &ndash; memory modify (constant address)
pci     &ndash; list and access PCI Configuraton Space
ping    &ndash; send ICMP ECHO_REQUEST to network host
printenv- print environment variables
protect &ndash; enable or disable FLASH write protection
rarpboot- boot image via network using RARP/TFTP protocol
read64    &ndash; read 64 bit word from 64 bit address
read64b    &ndash; read 8 bit word from 64 bit address
read_cmp    &ndash; read and compare memory to val
reset   &ndash; Perform RESET of the CPU
run     &ndash; run commands in an environment variable
saveenv &ndash; save environment variables to persistent storage
setenv  &ndash; set environment variables
sleep   &ndash; delay execution for some time
tftpboot- boot image via network using TFTP protocol
tlv_eeprom  &ndash; EEPROM data parsing for ebt3000 board
version &ndash; print monitor version
write64    &ndash; write 64 bit word to 64 bit address
write64b    &ndash; write 8 bit word to 64 bit address
Octeon ebt3000#
printenv</p>

<p>bootdelay=0
baudrate=115200
download_baudrate=115200
bootloader_flash_update_failsafe=protect off 0xbec00000 0xbec3FFFF;erase 0xbec00000 0xbec3FFFF;cp.b 0x100000 0xbec00000 0x40000
bootloader_flash_update=protect off 0xbec40000 0xbec7ffff;erase 0xbec40000 0xbec7ffff;cp.b 0x100000 0xbec40000 0x40000
linux_cf=fatload ide 0 21000000 vmlinux.64;bootoctlinux 21000000
burn_app=erase bf480000 +$(filesize);cp.b 100000 bf480000 $(filesize)
ls=fatls ide 0
bf=bootoct bf480000 forceboot numcores=$(numcores)
nuke_env=protect off BFBFE000 BFBFffff; erase BFBFE000 BFBFffff
autoload=n
octethethact=octeth0
ipaddr=172.21.44.136
turbo=tftpboot 0x21000000 turbo; bootoct 0x21000000 coremask=ffff
serverip=172.21.44.134
ethact=octeth4
numcores=16
stdin=serial
stdout=serial
stderr=serial</p>

<p>Environment size: 775/131068 bytes
Octeon ebt3000#
```</p>

<p>Bonus! Looks like the firmware shell is working fine, and it detects my compact flash card fine, so that should work well as an eventual boot media. Until then, I&rsquo;ll probably have to TFTP boot from one of the 8 gig network ports available in this pre-boot environment :&ndash;)</p>

<p>Next step: the hard parts! Creating a bootable disk image that u-boot can understand, and a usable *nix system root partition to live in.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SDK Troubles]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/11/sdk-troubles/"/>
    <updated>2013-08-11T22:50:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/11/sdk-troubles</id>
    <content type="html"><![CDATA[<p>Cavium apparently requires you to buy an expensive hardware development kit in order to get access to their SDK, which provides a simulator / base linux image / compiler for their platform. Bummer. After a while of digging though, a helpful wiki page from the FreeBSD MIPS team indicated that one may also petition to join a fairly closed-door community called <a href="http://cnusers.org/">cnUsers</a>, where approved members are allowed access to a pretty crippled occasionally released copy of the Cavium SDK. However, it does not offer advanced crypto/compression library support, and more importantly does not include the simulator/base linux image. 😢</p>

<p>Regardless, I have applied, and eagerly await evaluating what help, if any, the open source SDK will be in any porting efforts.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacking a Lanner MR-950]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/11/hacking-a-lanner-mr-950/"/>
    <updated>2013-08-11T11:36:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/11/hacking-a-lanner-mr-950</id>
    <content type="html"><![CDATA[<p>I recently bought a Lanner MR-950 &ldquo;Octeon Powered Security Appliance&rdquo; for super-cheaps off of ebay. It&rsquo;s a 16-core MIPS64 SoC with 10x 1-gig copper ports, DDR2 modules, dual redundant PSUs, etc.  (<a href="http://www.quantum.com.pl/baza/pdf/5f0ca0cc39ca9a492838d80453fc034ba5936ba3.pdf">Basic Datasheet</a>)</p>

<p>After consulting some chipset documentation to see what was supported, I also bought from eBay to populate the board 2x2GB DDR2-667 PC2-5300 ECC Registered DIMMs, and a 16GB compact flash card from someone on ebay kind enough to list read/write IOPS for their products :&ndash;)</p>

<p>Some excited pictures from receiving the item!
<img class="center" src="//blog.clockfort.com/images/posts/lanner_mr950.jpg" title="Lanner MR-950 on my couch" >
<img class="center" src="//blog.clockfort.com/images/posts/lanner_mr950_guts.jpg" title="Lanner MR-950&rsquo;s guts" ></p>

<p>&hellip; the dent in the LED panel above isn&rsquo;t an artifact of my wide-angle camera lens, this little guy has seen some action. With that done, now onto making him boot Linux.</p>

<p>I have some friends who work for / own a company that makes a neat custom <a href="https://www.exablox.com/products/">NAS solution on top of Cavium Octeon II SoCs</a>, and I happen to know that their boxes default to 115200bps serial for debugging, rather than the relatively industry-standard 9600/8/n/1. Sure enough, after this informed lucky guess on serial settings, after turning the box on (and finding the switch to turn off an ear-piercing alarm that I somehow triggered by booting the box), text started streaming in over my janky USB→DB9 Serial→Cisco rollover→RJ45→RJ45/DB9 console adapter setup.</p>

<p>``` text
\0x00</p>

<p>U-Boot 1.1.1 (Development build) (Build time: Mar 15 2007
 &ndash; 03:44:07)</p>

<p>WARNING:
WARNING: Measured DDR clock mismatch! expected: 266 MHz, measured: 196 MHz, cpu clock: 499 MHz
WARNING: Using measured clock for configuration.
WARNING:</p>

<p>Warning: Clock descriptor tuple not found in eeprom, using defaults</p>

<p>WARNING: memory configured for 196 mhz clock.<br/>
If this is not the actual memory clock
poor performance and memory instability may result.<br/>
The memory speed must be specified in the board eeprom</p>

<p>Warning: Board descriptor tuple not found in eeprom, using defaults
EBT3000 board revision major:1, minor:0, serial #: unknown
OCTEON CN38XX-NSP revision: 3(pass 4), Core clock: 499 MHz, DDR clock: 196 MHz (392 Mhz data rate)</p>

<p>Unsupported SDRAM Width, 4.  Must be 8 or 16.
hanging&hellip;</p>

<h1>#</h1>

<h1>ERROR ### Please RESET the board</h1>

<p>~\0x00</p>

<p>```</p>

<p>Darn. I unfortunately understand this message, and it means I need to both:</p>

<ul>
<li>Somehow find and buy 240pin DDR2 DIMMs that are registered, ECC, 2GB or less, AND meet the new apparent requirement of also being &ldquo;low density&rdquo; (aka having a larger number of low-density chips rather than high-density ones, which will be accessed over a large data width). This will probably be difficult to find.</li>
<li>Either buy slower RAM (I don&rsquo;t want to do that!) or figure out how the ram speed is stored/encoded in the EEPROM and change it.</li>
</ul>


<p>Whelp. At least old DDR2 server ram is very cheap used, albeit it will be very difficult to find the particular combination of features I need (used RAM sellers aren&rsquo;t usually forthcoming about the exact chip configuration of their DIMMs&hellip;).</p>

<p>Stay tuned! I&rsquo;ll be back in around a week and a half, hopefully with much better news, after receiving some new RAM.</p>
]]></content>
  </entry>
  
</feed>
