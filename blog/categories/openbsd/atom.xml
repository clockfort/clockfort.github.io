<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenBSD | Clockfort's Tech Blog]]></title>
  <link href="http://clockfort.github.io/blog/categories/openbsd/atom.xml" rel="self"/>
  <link href="http://clockfort.github.io/"/>
  <updated>2013-08-17T01:08:34-07:00</updated>
  <id>http://clockfort.github.io/</id>
  <author>
    <name><![CDATA[Chris Lockfort]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Picky Software to go with Picky Hardware]]></title>
    <link href="http://clockfort.github.io/blog/2013/08/15/picky-hardware/"/>
    <updated>2013-08-15T17:46:00-07:00</updated>
    <id>http://clockfort.github.io/blog/2013/08/15/picky-hardware</id>
    <content type="html"><![CDATA[<p>Good news! Grabbed a snapshot kernel build from OpenBSD&rsquo;s trunk (currently only the development version, 5.4, has the beginnings of support for any Cavium SoCs at all) and managed to TFTPboot into that kernel and a small ramdisk.
I did have some problems; everyone on the internet seems to say that telling u-boot&rsquo;s TFTP client to download to memory address 0 is a sort of auto-find-an-address-that-won&rsquo;t-stomp-on-uboot&rsquo;s-own-memory, but this was not the case for me. Manually inserting an ELF binary (in this case, kernel + small ramdisk) at 0x21000000 and booting it with the ELF-binary loader (<code>bootoctlinux</code>) did work though. (I got the 0x21000000 address from whoever owned this board last, as there were some macros left in the preboot environment using that address)</p>

<p>&hellip; that&rsquo;s where the fun stops though.</p>

<p><code>text
octcf0 at iobus0 base 0x1d000800 irq 0: Doesn't support 8bit card
: card not present
</code></p>

<p>(from OpenBSD/src/sys/arch/octeon/dev/octcf.c:)
``` c OpenBSD/src/sys/arch/octeon/dev/octcf.c</p>

<p>for (i = 0; i &lt; 8; i++) {</p>

<pre><code>uint64_t cfg = 
*(uint64_t *)PHYS_TO_XKPHYS(
    OCTEON_MIO_BOOT_BASE + MIO_BOOT_REG_CFG(i), CCA_NC);

if ((cfg &amp; BOOT_CFG_BASE_MASK) ==
    (OCTEON_CF_BASE &gt;&gt; BOOT_CFG_BASE_SHIFT)) {
    if ((cfg &amp; BOOT_CFG_WIDTH_MASK) == 0)
        printf(": Doesn't support 8bit card\n",
            wd-&gt;sc_dev.dv_xname);
    break;
}
</code></pre>

<p>}
```</p>

<p>ARGH. The hardware can do it, but OpenBSD is so damn picky about what it will take. USB didn&rsquo;t come up on boot either, and neither did the SATA controller, and neither did the network, so my options of what to boot from are basically using u-boot to manually load ramdisks into ram and booting them&hellip; or nothing.</p>

<p>Also bad:
<code>text
cpu0 at mainbus0: Unknown CPU type (0x0) rev 0.3 499 MHz, Software FP emulation
vendor "Cavium", unknown product 0x0005 (class processor subclass MIPS, rev 0x03) at pci0 dev 0 function 0 not configured
unsupported octeon model: 0xd0003
</code></p>

<p>The OpenBSD kernel doesn&rsquo;t know what this processor is :&ndash;(  Also as a result it&rsquo;s using only two cores, and is software-emulating floating point instructions, since it doesn&rsquo;t know how to interact with the hardware.</p>

<p>Not the worst, mostly just annoying:
``` text</p>

<p>0:0:0: mem address conflict 0x11000000/0x1000</p>

<p>0:0:0: mem address conflict 0x18000000/0x8000000</p>

<p>0:5:0: bridge mem address conflict 0x21000000/0x300000</p>

<p>0:5:0: bridge mem address conflict 0x10000000/0x100000</p>

<p>WARNING: No TOD clock, believing file system.
```</p>
]]></content>
  </entry>
  
</feed>
